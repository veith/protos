// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rest.proto

package rest // import "github.com/veith/protos/rest"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Set der REST Verben
// https://tools.ietf.org/html/rfc7231#section-4
type Link_Method int32

const (
	Link_PUT     Link_Method = 0
	Link_GET     Link_Method = 1
	Link_HEAD    Link_Method = 2
	Link_POST    Link_Method = 3
	Link_PATCH   Link_Method = 4
	Link_DELETE  Link_Method = 5
	Link_TRACE   Link_Method = 6
	Link_OPTIONS Link_Method = 7
)

var Link_Method_name = map[int32]string{
	0: "PUT",
	1: "GET",
	2: "HEAD",
	3: "POST",
	4: "PATCH",
	5: "DELETE",
	6: "TRACE",
	7: "OPTIONS",
}
var Link_Method_value = map[string]int32{
	"PUT":     0,
	"GET":     1,
	"HEAD":    2,
	"POST":    3,
	"PATCH":   4,
	"DELETE":  5,
	"TRACE":   6,
	"OPTIONS": 7,
}

func (x Link_Method) String() string {
	return proto.EnumName(Link_Method_name, int32(x))
}
func (Link_Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_rest_d4b65732751dd6f2, []int{0, 0}
}

// IANA konforme Links /
// List of official link rels:
// http://www.iana.org/assignments/link-relations/link-relations.xhtml
type Link struct {
	Rel string `protobuf:"bytes,1,opt,name=rel,proto3" json:"rel,omitempty"`
	// HTTP Verb
	Method Link_Method `protobuf:"varint,2,opt,name=method,proto3,enum=furo.type.Link_Method" json:"method,omitempty"`
	// Absolute URI
	Href string `protobuf:"bytes,3,opt,name=href,proto3" json:"href,omitempty"`
	// Der mime type des Links.
	Type                 string   `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Link) Reset()         { *m = Link{} }
func (m *Link) String() string { return proto.CompactTextString(m) }
func (*Link) ProtoMessage()    {}
func (*Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_rest_d4b65732751dd6f2, []int{0}
}
func (m *Link) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Link.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Link.Merge(dst, src)
}
func (m *Link) XXX_Size() int {
	return m.Size()
}
func (m *Link) XXX_DiscardUnknown() {
	xxx_messageInfo_Link.DiscardUnknown(m)
}

var xxx_messageInfo_Link proto.InternalMessageInfo

func (m *Link) GetRel() string {
	if m != nil {
		return m.Rel
	}
	return ""
}

func (m *Link) GetMethod() Link_Method {
	if m != nil {
		return m.Method
	}
	return Link_PUT
}

func (m *Link) GetHref() string {
	if m != nil {
		return m.Href
	}
	return ""
}

func (m *Link) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

// field error
type FieldError struct {
	// the field, where error appears
	Field string `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	// error massage
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// massage for developer
	DeveloperMessage string `protobuf:"bytes,4,opt,name=developerMessage,proto3" json:"developerMessage,omitempty"`
	// error code
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FieldError) Reset()         { *m = FieldError{} }
func (m *FieldError) String() string { return proto.CompactTextString(m) }
func (*FieldError) ProtoMessage()    {}
func (*FieldError) Descriptor() ([]byte, []int) {
	return fileDescriptor_rest_d4b65732751dd6f2, []int{1}
}
func (m *FieldError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FieldError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FieldError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FieldError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldError.Merge(dst, src)
}
func (m *FieldError) XXX_Size() int {
	return m.Size()
}
func (m *FieldError) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldError.DiscardUnknown(m)
}

var xxx_messageInfo_FieldError proto.InternalMessageInfo

func (m *FieldError) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *FieldError) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *FieldError) GetDeveloperMessage() string {
	if m != nil {
		return m.DeveloperMessage
	}
	return ""
}

func (m *FieldError) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func init() {
	proto.RegisterType((*Link)(nil), "furo.type.Link")
	proto.RegisterType((*FieldError)(nil), "furo.type.FieldError")
	proto.RegisterEnum("furo.type.Link_Method", Link_Method_name, Link_Method_value)
}
func (m *Link) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Link) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRest(dAtA, i, uint64(len(m.Rel)))
		i += copy(dAtA[i:], m.Rel)
	}
	if m.Method != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRest(dAtA, i, uint64(m.Method))
	}
	if len(m.Href) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRest(dAtA, i, uint64(len(m.Href)))
		i += copy(dAtA[i:], m.Href)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRest(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FieldError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRest(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if len(m.Field) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRest(dAtA, i, uint64(len(m.Field)))
		i += copy(dAtA[i:], m.Field)
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRest(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.DeveloperMessage) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRest(dAtA, i, uint64(len(m.DeveloperMessage)))
		i += copy(dAtA[i:], m.DeveloperMessage)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Link) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rel)
	if l > 0 {
		n += 1 + l + sovRest(uint64(l))
	}
	if m.Method != 0 {
		n += 1 + sovRest(uint64(m.Method))
	}
	l = len(m.Href)
	if l > 0 {
		n += 1 + l + sovRest(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FieldError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovRest(uint64(l))
	}
	l = len(m.Field)
	if l > 0 {
		n += 1 + l + sovRest(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovRest(uint64(l))
	}
	l = len(m.DeveloperMessage)
	if l > 0 {
		n += 1 + l + sovRest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRest(x uint64) (n int) {
	return sovRest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Link) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Link: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Link: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Method", wireType)
			}
			m.Method = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Method |= (Link_Method(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Href", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Href = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRest
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rest.proto", fileDescriptor_rest_d4b65732751dd6f2) }

var fileDescriptor_rest_d4b65732751dd6f2 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xc1, 0x4a, 0xeb, 0x40,
	0x14, 0x86, 0xef, 0x34, 0x69, 0x72, 0x73, 0x2e, 0x5c, 0x86, 0x41, 0x24, 0x88, 0x94, 0xda, 0x55,
	0x71, 0x91, 0x80, 0x2e, 0x5d, 0xd5, 0x36, 0x5a, 0xa1, 0xb5, 0x21, 0x8d, 0x1b, 0xc1, 0x45, 0xda,
	0x9c, 0x26, 0xc1, 0x34, 0x13, 0x26, 0xd3, 0x82, 0xe0, 0x03, 0xba, 0xd3, 0x47, 0x90, 0x3e, 0x89,
	0x4c, 0x12, 0xdd, 0xb8, 0x19, 0xbe, 0xf3, 0xcf, 0x7f, 0x0e, 0xf3, 0xcf, 0x01, 0x10, 0x58, 0x49,
	0xa7, 0x14, 0x5c, 0x72, 0x66, 0x6d, 0x76, 0x82, 0x3b, 0xf2, 0xa5, 0xc4, 0x93, 0xd3, 0x84, 0xf3,
	0x24, 0x47, 0x37, 0x2a, 0x33, 0x37, 0x2a, 0x0a, 0x2e, 0x23, 0x99, 0xf1, 0xa2, 0x6a, 0x8c, 0x83,
	0x77, 0x02, 0xfa, 0x2c, 0x2b, 0x9e, 0x19, 0x05, 0x4d, 0x60, 0x6e, 0x93, 0x3e, 0x19, 0x5a, 0x81,
	0x42, 0xe6, 0x80, 0xb1, 0x45, 0x99, 0xf2, 0xd8, 0xee, 0xf4, 0xc9, 0xf0, 0xff, 0xc5, 0xb1, 0xf3,
	0x33, 0xd4, 0x51, 0x2d, 0xce, 0xbc, 0xbe, 0x0d, 0x5a, 0x17, 0x63, 0xa0, 0xa7, 0x02, 0x37, 0xb6,
	0x56, 0x8f, 0xa8, 0x59, 0x69, 0xca, 0x6f, 0xeb, 0x8d, 0xa6, 0x78, 0xf0, 0x04, 0x46, 0xd3, 0xc9,
	0x4c, 0xd0, 0xfc, 0x87, 0x90, 0xfe, 0x51, 0x70, 0xeb, 0x85, 0x94, 0xb0, 0xbf, 0xa0, 0x4f, 0xbd,
	0xd1, 0x84, 0x76, 0x14, 0xf9, 0x8b, 0x65, 0x48, 0x35, 0x66, 0x41, 0xd7, 0x1f, 0x85, 0xe3, 0x29,
	0xd5, 0x19, 0x80, 0x31, 0xf1, 0x66, 0x5e, 0xe8, 0xd1, 0xae, 0x92, 0xc3, 0x60, 0x34, 0xf6, 0xa8,
	0xc1, 0xfe, 0x81, 0xb9, 0xf0, 0xc3, 0xbb, 0xc5, 0xfd, 0x92, 0x9a, 0x83, 0x57, 0x80, 0x9b, 0x0c,
	0xf3, 0xd8, 0x13, 0x82, 0x0b, 0xf5, 0x80, 0x35, 0x8f, 0xb1, 0xcd, 0x55, 0x33, 0x3b, 0x82, 0xee,
	0x46, 0x39, 0xea, 0x5c, 0x56, 0xd0, 0x14, 0xcc, 0x06, 0x73, 0x8b, 0x55, 0x15, 0x25, 0xd8, 0x26,
	0xf8, 0x2e, 0xd9, 0x39, 0xd0, 0x18, 0xf7, 0x98, 0xf3, 0x12, 0xc5, 0xbc, 0xb5, 0x34, 0x81, 0x7e,
	0xe9, 0xd7, 0xee, 0xdb, 0xa1, 0x47, 0x3e, 0x0e, 0x3d, 0xf2, 0x79, 0xe8, 0x91, 0xc7, 0xb3, 0x24,
	0x93, 0xe9, 0x6e, 0xe5, 0xac, 0xf9, 0xd6, 0xdd, 0x63, 0x26, 0x53, 0xb7, 0xfe, 0xf5, 0xca, 0x55,
	0xab, 0xba, 0x52, 0xc7, 0xca, 0xa8, 0x95, 0xcb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0x8c,
	0x49, 0x75, 0xbe, 0x01, 0x00, 0x00,
}
